IceCTF 2016 – n1d3n

Toke – Web 45

I have a feeling they were pretty high when they made this website…

Since the challenge is web based, I went ahead and loaded up burp to let spider run while I browse the website. I registered an account but found nothing remarkable.

After inspecting the items from spider I saw a parameter named jwt_token – that sounds awfully close to the challenge. That has to be something.

A quick google search points me to jwt.io – I threw my jwt token in and it decodes to:

{
 "flag": "IceCTF{jW7_t0K3ns_4Re_nO_p14CE_fOR_53CrE7S}",
 "user": "cool"
}
 

Audio Problems – Forensics 50

We intercepted this audio signal, it sounds like there could be something hidden in it. Can you take a look and see if you can find anything?

Downloaded the .wav file. Typically messages are hidden in wav files via a Spectrograms

An awesome application to check that is spek (https://github.com/alexkay/spek).

Loaded up the wav file in spek and there’s the flag

IceCTF{y0U_b3t7Er_l15TeN_cL053lY}
Corrupt Transmission – Forensics 50

We intercepted this image, but it must have gotten corrupted during the transmission. Can you try and fix it? corrupt.png

Downloaded the .png file and tried to open it. Obviously it didn’t open (lol).

I went ahead and ran strings on the file for an easy flag and its a no go.

Decided to check the header and notice that it is not a typical PNG header in HEX.

The header in the image was (90 50 4E 47 0E 1A 0A 1B) and a typical PNG header is (89 50 4E 47 0D 0A 1A 0A)

Once I repaired the header there was the flag.

IceCTF{t1s_but_4_5cr4tch}
Vape Nation – Stego 50

Go Green! vape_nation.png

Looks like a standard .png file with some sort of image overlay.

Loaded up StegSolver.jar (place link here) and just went through the planes to see if I can find the easy flag.

Flag loaded on Green plane 0

IceCTF{420_CuR35_c4NCEr}
Blue Monday – Misc 60

Those who came before me lived through their vocations From the past until completion, they’ll turn away no more And still I find it so hard to say what I need to say But I’m quite sure that you’ll tell me just how I should feel today.blue_monday

Downloaded and ran file. It let me know it was a MIDI.

Ran strings on the file and got an unremarkable result. Decided to run hexeditor on the file and noticed it was very small.

Ran strings -n1 on the file and just went down the line for the flag.

IceCTF{HAck1n9_mU5Ic_W17h_mID15_L3t5_H4vE_a_r4v3}
Exposed! – Web 60

John is pretty happy with himself, he just made his first website! He used all the hip and cool systems, like NginX, PHP and Git! Everyone is so happy for him, but can you get him to give you the flag?

Alright, like the last web one I went ahead and loaded up Burp and just started to browse around the website.

robots.txt gave me some valuable insight

User-Agent: *
Disallow: /.git
Disallow: /flag.php
Based on that and the description it looks like we have a git repo we can plunder.

git clone http://exposed.vuln.icec.tf/.git exposed
This cloned into a typical git repo but it also gave is a .git folder with a bunch of really good stuff. Now me being the lazy person I am, I don’t want to manually go through all of these folders.

I decide to load up GitTools (https://github.com/internetwache/GitTools) specifically the extractor.sh

./extractor.sh ~/icectf/exposed/exposed/ /tmp/testdump
This gave me ALL SORTS of stuff. Specifically these folders. There were 3 similar folders, but I only pasted one.

Found file: /tmp/testdump/17-541e08f75514d1caec2a62fe3a1af308da6f35d8/.gitignore
Found file: /tmp/testdump/17-541e08f75514d1caec2a62fe3a1af308da6f35d8/flag.php
Found file: /tmp/testdump/17-541e08f75514d1caec2a62fe3a1af308da6f35d8/flag.txt
Found file: /tmp/testdump/17-541e08f75514d1caec2a62fe3a1af308da6f35d8/index.php
Welp looks like I got this one in the bag. Time to cat out the flag.txt and snag some points

cat flag.txt
IceCTF{this_isnt_the_flag_either}
WTF!!!!!!!!!!! So I did that for the 3 other instances and got the same thing. So then I decided to strap up for the long haul and start from the first commit to the last.

In the second commit I ran

cat index.php
and hidden in that file was!

IceCTF{secure_y0ur_g1t_repos_pe0ple}
 

Miners! – Web 65

The miners website has been working on adding a login portal so that all miners can get the flag, but they haven’t made any accounts! However, your boss demands the flag now! Can you get in anyway? miners.vuln.icec.tf

So I am not gonna lie. I googled the shit out of this and found an old ctf write-up from here

Threw this into the Username

' union select 1,2,info from information_schema.processlist-- -
And it worked! Logged in and took the flag

IceCTF{the_miners_union_is_a_strong_one}
R.I.P Transmission – Forensics 65

This seems to be receiving some sort of transmission. Our experts have been working around the clock trying and figure out what the hell it means with no hope of getting to the bottom of it. You’re our only hope.

So I pulled down the binary and loaded it up with binary ninja to see if there was an easy flag sitting there. This program is absolutely crazy and stepping through the application wasn’t helpful at all.

Since it is a Forensics challenge, I wanted to see if there was anything hidden inside of the binary. So I loaded up Foremost to see if there was anything interesting inside.

foremost rip_2067f9686b4d07eea2cac19b9c6588b2abac16500135901ce8781e4ccc262446 
Processing: rip_2067f9686b4d07eea2cac19b9c6588b2abac16500135901ce8781e4ccc262446
|foundat=rip.jpgUT 
*|
Well, it looks like there is a jpg hidden in there. Should be nice and easy. Move into the folder and notice that there is a zip archive that has a password. Loaded up AAPR on my windows machine. (You can use the DEMO version for .zip files) and it popped the password (bunny) in a minute or two. Used the password on the zip file and extract the rip.jpg image and the flag is written on the image.

Kitty – Web 70

They managed to secure their website this time and moved the hashing to the server :(. We managed to leak this hash of the admin’s password though! c7e83c01ed3ef54812673569b2d79c4e1f6554ffeb27706e98c067de9ab12d1a. Can you get the flag? kitty.vuln.icec.tf

Since they were nice enough to give us the hash I just went ahead and googled it and was given

Vo83*
Since we now have the admin password, lets try the lowest hanging fruit and attempt to login with the username “admin”

And it worked! Logged in and got the flag

 IceCTF{i_guess_hashing_isnt_everything_in_this_world}
 

Intercepted Conversations Pt.1 – Forensics 115

This traffic was picked up by one of our agents. We think this might be a conversation between two elite hackers that we are investigating. Can you see if you can analyze the data? intercept.pcapng

So this challenge kicked my ass. One of my goals for this CTF was to complete this one. I was able to do it with about 20 hours left in the CTF.

So opening the intercept.pcapng in Wireshark showed me that this was a packet capture of some sort of USB device. But what type of device? One of my pitfalls was looking at the “DEVICE DESCRIPTOR” field too early in the pcap. I spent many days trying to find the flag with using this information. Instead of getting a solid overview of the entire pcap I focused (incorrectly) on this.

idVendor: Ericsson Business Mobile Networks BV (0x0bdb)
All this was, was that the laptop that the designer used happened to have when he was creating this. Anyways, after pulling my head out of my ass I decided to look at the host field in Wireshark and see if anything else interesting was being initialized. Specifically any sort of input device. After a bit of searching I was able to find a solid input device.

idProduct: Kinesis Advantage PRO MPC/USB Keyboard (0x0007)
That sounds more like it. Before this, I have never analyzed  a USB pcap, but since it is a keyboard, we are probably hunting for key strokes. I used my best friend google and was given an amazing blog post that outlined how he solved a CSAW 2012 challenge that was similar.

So after taking the time to fully digest that blog post I was ready to get the “LEFTOVER CAPTURE DATA” field in Wireshark and see if we can match everything. I took Hexter’s Wireshark expression and modified to get rid of some of the pcap’s empty values

((usb.transfer_type == 0x01) && (frame.len == 72)) && !(usb.capdata == 00:00:00:00:00:00:00:00) && !(usb.capdata == 20:00:00:00:00:00:00:00)&& !(usb.capdata == 02:00:00:00:00:00:00:00)
Once I used this I had a very clear picture the hex bite codes for the key presses.

Wireshark

I took each value starting with 0x0a and placed it into a file so I could start looking to identify the key strokes. Again taking a look at Hexstr’s post post usb.org maintains updated keyboard layout tables. Here on page 53.

So instead of being fancy and writing a script, I just went ahead and did it by hand and was rewarded with this output

GIDIKY{,J0_P1V3;_X,3O7T_4LT,4T5}
Well, it has the same layout as the flag, but it is definitely not a flag. So after trying to run it though some cipher solving websites I didn’t find anything. Then I though maybe because the keyboard is USB 3.0 that is had a different HID table. All of which I came up with nothing.

So after I slept on it, I thought that someone who has a specialized keyboard like that may possibly use a different keyboard layout.

I visited Will’s Qwerty to Dvorak website and placed the output and was given

ICECTF?wH0{L1K3s{Qw3R7Y{4NYw4Y5+
I just changed the format to the standard flag format and was rewarded with 115 pts!

IceCTF{wH0_L1K3s_Qw3R7Y_4NYw4Y5}
